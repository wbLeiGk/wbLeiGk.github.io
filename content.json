{"meta":{"title":"QK","subtitle":null,"description":null,"author":"lwb","url":"http://yoursite.com"},"pages":[{"title":"Tags","date":"2019-01-31T10:50:15.860Z","updated":"2018-11-30T03:26:01.000Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"Categories","date":"2019-01-31T10:50:15.859Z","updated":"2018-11-30T03:26:01.000Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"About","date":"2019-03-27T13:43:10.325Z","updated":"2019-03-27T13:43:10.325Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"专业：计算机科学与技术 毕业：17届 技能栈： 语言： c/c++/python/go算法： 基本数据结构与常用算法项目构建： cmake常用IDE: vs2019版本管理软件： git/svn 目前职业规划： 1、OpenGL2、GoLang 微服务架构 、自动化部署 爱好： 看书：maybe 1、技术书 2、中国哲学书 3、也许可能大概随手翻到哪本的小说 听音乐：listen everything， prefering quietly 看动漫：maybe one day ,i could make myself animation 挣钱：just a little boy ,and run with dream if u like me，please contact Me，我还是单身小狗狗 email：leiwb.gk =&gt;Google below is trivialeg : 16年CAD软件开发 17年网络安全 18年音视频对讲"}],"posts":[{"title":"单例模式","slug":"单例模式","date":"2019-03-27T13:26:54.000Z","updated":"2019-03-27T13:28:42.491Z","comments":true,"path":"2019/03/27/单例模式/","link":"","permalink":"http://yoursite.com/2019/03/27/单例模式/","excerpt":"","text":"单例模式 123456789101112131415161718class cSingle &#123;public: cSingle(const cSingle&amp;) = delete; cSingle&amp; operator = (const cSingle&amp;) =delete; static cSingle* instance() &#123; static cSingle __instance; return &amp;__instance; &#125;private: cSingle() &#123;&#125;;&#125;;int main()&#123; cSingle* first = cSingle::instance(); cSingle* second = cSingle::instance(); cout &lt;&lt; \"the first address is :\" &lt;&lt; first &lt;&lt; endl; cout &lt;&lt; \"the second address is :\" &lt;&lt; second &lt;&lt; endl;&#125;","categories":[{"name":"编程","slug":"编程","permalink":"http://yoursite.com/categories/编程/"},{"name":"设计模式","slug":"编程/设计模式","permalink":"http://yoursite.com/categories/编程/设计模式/"}],"tags":[]},{"title":"retry task in cpp &golang","slug":"cppAndGolang-retryTaskCompare","date":"2019-03-27T12:26:33.000Z","updated":"2019-03-27T13:01:47.684Z","comments":true,"path":"2019/03/27/cppAndGolang-retryTaskCompare/","link":"","permalink":"http://yoursite.com/2019/03/27/cppAndGolang-retryTaskCompare/","excerpt":"","text":"今日偶然看到 retry task 的玩意，貌似这个在Instant message 挺常见的 今日就来个 cpp &amp; GoLang 的写法，主要是掌握系统时间的控制 GoLang1234567891011121314151617func WaitForServer(url string) error &#123; const timeout = 1 * time.Minute deadline := time.Now().Add(timeout) for tries := 0; time.Now().Before(deadline); tries++ &#123; _, err := http.Head(url) if err == nil &#123; return nil // success &#125; log.Printf(\"server not responding (%s); retrying...\", err) //time.Sleep(time.Second &lt;&lt; uint(tries)) // exponential back-off time.Sleep(time.Second) &#125; return fmt.Errorf(\"server %s failed to respond after %s\", url, timeout)&#125;func main()&#123; go WaitForServer()&#125; 对于cpp 同样的通信原理 1234567891011121314151617181920212223242526272829#include&lt;iostream&gt;#include&lt;chrono&gt;#include&lt;thread&gt;using namespace std;bool work_thread()&#123; int i=0; chrono::system_clock::time_point oneMinute=chrono::system_clock::now() + chrono::seconds(10); while (chrono::system_clock::now()&lt; oneMinute) &#123; // execute some network operatoe //... tcp /ip socket // if(socketID.receive is not NULL) return true; cout &lt;&lt; \"the time is \" &lt;&lt; i++ &lt;&lt; endl; this_thread::sleep_for(chrono::seconds(1)); &#125; return false;&#125;void main() &#123; auto result = async(lauch::async,work_thread); if(result.get())&#123; // ... &#125;else&#123; // ... &#125; system(\"pause\");&#125;","categories":[{"name":"编程","slug":"编程","permalink":"http://yoursite.com/categories/编程/"},{"name":"cpp","slug":"编程/cpp","permalink":"http://yoursite.com/categories/编程/cpp/"},{"name":"STL(类对象)","slug":"编程/cpp/STL-类对象","permalink":"http://yoursite.com/categories/编程/cpp/STL-类对象/"}],"tags":[]},{"title":"git简单使用","slug":"git简单使用","date":"2019-03-26T13:49:13.000Z","updated":"2019-03-26T14:29:24.905Z","comments":true,"path":"2019/03/26/git简单使用/","link":"","permalink":"http://yoursite.com/2019/03/26/git简单使用/","excerpt":"","text":"选择git，而不是svn的原因，可能是因为git，在个人PC上自成版本库，而svn则不行，需要联网（局域网 or 广域网） 而对于我常用的命令也不多，可能就那么几个，以下做个简单描述 首先弄清楚几个概念 工作区： 就是你在电脑上看到的目录(.git隐藏目录版本库除外) 版本库(Repository)： 工作区有一个隐藏目录.git文件夹，这是版本库。其中版本库里面存了很多东西，其中最重要的就是stage(暂存区，可以理解为缓冲区，一次性提交多个修改)，还有Git为我们自动创建了第一个分支master,以及指向master的一个指针HEAD。master分支指向提交 我们前面说过使用Git提交文件到版本库有两步：第一步：是使用 git add 把文件添加进去，实际上就是把文件添加到暂存区。第二步：使用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支上。 1. 初始化 or 添加远程库123456789# 本地库初始化 git init# 远程库关联git remote add origin https://yourRepository# 远程库克隆git clone https://yourRepository# 目前本地git 拥有远程库查看git remote show 2. 代码（文本）修改 {增加、删除、修改文件}123456789# 增加文件 or 修改文件git add modifyOraddFile.*# 删除文件没有对应 添加缓冲区# 查看当前修改状态git status# 提交到版本库git commit -m \"add | modify | delete file , or repaire bug function etc\" 3. 代码版本回溯12345678# 回退到上个/上上个/上上上个/..... 山里有个庙个版本git reset --hard HEAD^ # ^是回退版本的个数# 回退特定版本#查看版本号git reflog#回退版本号git reset --hard \"version ID\" 4. 分支操作常用于bug修复，但是我不喜欢使用stash 这个命令，更喜欢新建分支，因为清晰明了 12345678#查看分支git branch# 新建分支并切换git checkout -b branchName #新建当前分支，以当前分支为基础# 分支切换git checkout branchName# 分支删除git branch -d branchName 5. 分支合并12# 合并分支代码branchName 到当前分支代码git merge branchName 6.分支推送12# 推送分支git push origin branchName 打完收工~","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}],"tags":[]},{"title":"cpp SFINAE","slug":"cpp特化","date":"2019-03-26T10:17:55.000Z","updated":"2019-03-26T13:39:24.753Z","comments":true,"path":"2019/03/26/cpp特化/","link":"","permalink":"http://yoursite.com/2019/03/26/cpp特化/","excerpt":"","text":"cpp 模板SFINAE(“Substitution Failure Is Not An Error”) 下面是一段引文，来自网站 https://en.cppreference.com/w/ 123This rule applies during overload resolution of function templates: When substituting the explicitly specified or deduced type for the template parameter fails, the specialization is discarded from the overload set instead of causing a compile error.This feature is used in template metaprogramming. 推断辅助函数：decay_t / decltype 涉及：函数重载（overload） / 参数计算后进栈 12345678910111213141516171819202122232425262728293031323334353637383940#include &lt;iostream&gt; // this overload is always in the set of overloads// ellipsis parameter has the lowest ranking for overload resolution void test(...) &#123; std::cout &lt;&lt; \"Catch-all overload called\\n\"; &#125; // this overload is added to the set of overloads if // C is a reference-to-class type and F is a pointer to member function of C // (void)(c.*f)(), void() // the return type is void() // but (void)(c.*f)(), void() execute comma template &lt;class C, class F&gt; auto test(C c, F f) -&gt; decltype((void)(c.*f)(), void()) &#123; std::cout &lt;&lt; \"Reference overload called\\n\"; &#125; // this overload is added to the set of overloads if // C is a pointer-to-class type and F is a pointer to member function of C template &lt;class C, class F&gt; auto test(C c, F f) -&gt; decltype((void)((c-&gt;*f)()), void()) &#123; std::cout &lt;&lt; \"Pointer overload called\\n\"; &#125; struct X &#123; void f() &#123;&#125; &#125;; int main()&#123; X x; test( x, &amp;X::f); test(&amp;x, &amp;X::f); test(42, 1337); &#125; //output // Reference overload called // Pointer overload called // Catch-all overload called","categories":[{"name":"编程","slug":"编程","permalink":"http://yoursite.com/categories/编程/"},{"name":"cpp","slug":"编程/cpp","permalink":"http://yoursite.com/categories/编程/cpp/"},{"name":"元编程","slug":"编程/cpp/元编程","permalink":"http://yoursite.com/categories/编程/cpp/元编程/"}],"tags":[]},{"title":"c#加载cppdll","slug":"c-加载cppdll","date":"2019-03-25T07:44:58.000Z","updated":"2019-03-26T13:40:10.957Z","comments":true,"path":"2019/03/25/c-加载cppdll/","link":"","permalink":"http://yoursite.com/2019/03/25/c-加载cppdll/","excerpt":"","text":"来源与前一阵子有一个朋友请教我关于c#调用c/cpp dll 的方式 1. cpp/c 封装成dll环境：vs2019项目类型：新建空项目文件类型：c/cppfileContent:123456789101112#include &lt;iostream&gt;using namespace std;extern \"C\"&#123; void __declspec(dllexport) myPrint()&#123; cout &lt;&lt; \"hello world\" &lt;&lt; endl; &#125; int __declspec(dllexport) a(int b) &#123; return b; &#125;&#125; 项目属性：dll 2. c# 调用端环境：vs2019项目类型：新建空项目文件类型：c#控制台程序fileContent:1234567891011121314151617181920212223242526272829303132333435363738394041424344using System;using System.Collections.Generic;using System.Linq;using System.Runtime.InteropServices;using System.Text;using System.Threading.Tasks;namespace hellocaller&#123; class Program &#123; //[DllImport(@\"..\\\\hello\\\\Release\\\\hello.dll\")] //private static extern void myPrint(); //[DllImport(@\"..\\\\hello\\\\Release\\\\hello.dll\")] //private static extern int a(int b); [DllImport(\"kernel32.dll\", EntryPoint = \"LoadLibrary\")] static extern int LoadLibrary( [MarshalAs(UnmanagedType.LPStr)] string lpLibFileName); [DllImport(\"kernel32.dll\", EntryPoint = \"GetProcAddress\")] static extern IntPtr GetProcAddress(int hModule, [MarshalAs(UnmanagedType.LPStr)] string lpProcName); [DllImport(\"kernel32.dll\", EntryPoint = \"FreeLibrary\")] static extern bool FreeLibrary(int hModule); delegate int A(int b); static void Main(string[] args) &#123; int hModule = LoadLibrary(@\"..\\\\hello\\\\Release\\\\hello.dll\"); //if(hModule == 0) // return false; IntPtr intPtr = GetProcAddress(hModule, \"a\"); A a = (A)Marshal.GetDelegateForFunctionPointer(intPtr, typeof(A)); Console.WriteLine(a(3)); //myPrint(); FreeLibrary(hModule); &#125; &#125;&#125;","categories":[{"name":"编程","slug":"编程","permalink":"http://yoursite.com/categories/编程/"},{"name":"cpp","slug":"编程/cpp","permalink":"http://yoursite.com/categories/编程/cpp/"},{"name":"DLL交互","slug":"编程/cpp/DLL交互","permalink":"http://yoursite.com/categories/编程/cpp/DLL交互/"}],"tags":[]},{"title":"接口interface 心得（1）","slug":"go接口小得","date":"2019-03-18T14:52:09.000Z","updated":"2019-03-18T16:00:39.546Z","comments":true,"path":"2019/03/18/go接口小得/","link":"","permalink":"http://yoursite.com/2019/03/18/go接口小得/","excerpt":"","text":"看到go 语言的接口一个与众不同的地方~ 我的印象中，在go中，基本上是以下这种行为 12345678910111213141516171819202122package mainimport \"fmt\"type people interface &#123; getOccupation() string&#125;type student struct &#123;&#125;type worker struct &#123;&#125;func (stu student)getOccupation() string&#123; return \"student\"&#125;func(wk worker)getOccupation() string&#123; return \"worker\"&#125;func printOccupation(pe people)&#123; fmt.Println(\"the occupation is : \",pe.getOccupation())&#125;func main()&#123; printOccupation(student&#123;&#125;)&#125; 对于上面的代码没什么出奇的地方 请看下面一段代码123456789101112131415161718192021222324252627282930package mainimport ( \"fmt\")type ioreader interface &#123; MyReader()[]byte&#125;type fileExcute interface &#123; MyReader()[]byte MyWrite([]byte)&#125;func MyFlush2(io ioreader)&#123; fmt.Println(\"code snippet is executing: MyFlush2\")&#125;func MyFlush(io fileExcute)&#123; MyFlush2(io) fmt.Println(\"code snippet is executing: MyFlush\")&#125;type Myfile struct &#123;&#125;func (file Myfile) MyReader() []byte&#123; return []byte&#123;&#125;&#125;func (fil Myfile) MyWrite([]byte) &#123;&#125;func main() &#123; MyFlush(Myfile&#123;&#125;)&#125; 这时候一个结构体实现了两个接口，而且作为参数传递，接口fileExcute中的方法比ioreader接口中的方法要多 且被当成参数传递给了ioreader，数据类型也兼容，反过来将ioreader 传递给fileExecute 就会出错，因为会出现部分方法没有实现的错误 可见go语言中的interface 很是灵活","categories":[{"name":"编程","slug":"编程","permalink":"http://yoursite.com/categories/编程/"},{"name":"go","slug":"编程/go","permalink":"http://yoursite.com/categories/编程/go/"}],"tags":[]},{"title":"screen","slug":"工具screen","date":"2019-03-18T14:00:40.000Z","updated":"2019-03-26T13:51:09.139Z","comments":true,"path":"2019/03/18/工具screen/","link":"","permalink":"http://yoursite.com/2019/03/18/工具screen/","excerpt":"","text":"玩过Linux的多多少少听过 screen 这个玩意~ sreen 是为了长时间工作的一种会话管理工具，你不用担心你退出终端而中断你的任务 比如你在公司远程连接了云服务器，但是任务没有做完，怎么办，没关系，我们只要使用screen 回到家中登上云服务器attach screen session 就可以，我们完全可以在不同的物理中断上共享 相同会话进程组~ 他就像你在本地shell执行程序一样，其实是在绘画断开的时候阻断了信号signup信号 是我最喜爱的工具之一 创建会话开始1screen 创建任务为了方便attach session ，一般使用下面的方式进行创建任务123screen -S session name [task]//for example screen -S modifycpp vim hello.cpp 暂停任务 暂停当前工作，返回shell 窗口1ctrl+a d 创建新的shell创建一个新的shell 窗口1ctrl+a c 会话窗口切换12ctrl+a p // 前一个窗口ctrl+a n //下一个窗口 附加会话1screen -x [session id]/[session name] 查看会话1screen -ls 以上是我比较常用的几个命令吧。","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/categories/工具/"}],"tags":[]},{"title":"设计模式","slug":"设计模式","date":"2019-03-18T12:21:20.000Z","updated":"2019-03-18T13:15:00.176Z","comments":true,"path":"2019/03/18/设计模式/","link":"","permalink":"http://yoursite.com/2019/03/18/设计模式/","excerpt":"","text":"开此分类的原因，是因为有人在吃饭的时候向我问起了设计模式 关于设计模式的几大原则 1、单一职责原则功能职责边界划分清楚，当一个功能crash/uncorrect ,不会影响另一个功能模块 2、里氏替换原则子类继承父类的时候，尽量不去覆盖和重写父类的方法，这样就算，传入参数发生了变动（父类-&gt;子类），也不会影响原对象的功能（父类） 3、依赖倒置原则与面向接口编程很像，设计功能类时，考虑到可扩展性，一般我们在本类中维持一个接口，这样我们不用修改接口，直接通过实现接口，来完成功能的可扩展性 4、接口隔离原则这个更像是数据库范式中的第三范式，我们应该完全实现接口中的方法，而不是部分实现，从而接口不是最小职责的原则 5、迪米特法则高内聚低耦合，也就是对外提供统一的接口，其他类或者自己不访问其他类的内部数据 6、开闭原则很模糊的一个设计原则，只针对原有代码进行扩展，而不修改，更像是针对接口进行扩展，而不修改原有接口的内容","categories":[{"name":"编程","slug":"编程","permalink":"http://yoursite.com/categories/编程/"},{"name":"设计模式","slug":"编程/设计模式","permalink":"http://yoursite.com/categories/编程/设计模式/"}],"tags":[]},{"title":"拓扑排序","slug":"CPPTopologicOrder","date":"2019-03-12T15:47:01.000Z","updated":"2019-03-26T13:41:56.081Z","comments":true,"path":"2019/03/12/CPPTopologicOrder/","link":"","permalink":"http://yoursite.com/2019/03/12/CPPTopologicOrder/","excerpt":"","text":"todo","categories":[{"name":"编程","slug":"编程","permalink":"http://yoursite.com/categories/编程/"},{"name":"cpp","slug":"编程/cpp","permalink":"http://yoursite.com/categories/编程/cpp/"},{"name":"算法","slug":"编程/cpp/算法","permalink":"http://yoursite.com/categories/编程/cpp/算法/"}],"tags":[]},{"title":"cpp11线程","slug":"cpp11线程","date":"2019-03-05T13:45:03.000Z","updated":"2019-03-27T12:59:21.953Z","comments":true,"path":"2019/03/05/cpp11线程/","link":"","permalink":"http://yoursite.com/2019/03/05/cpp11线程/","excerpt":"","text":"本来不想动~，想多看一点其他书~，但还是强迫自己写下这篇cpp11的线程概述~ 关于cpp的线程详解有一本书讲的蛮不错~，前一阵子再看《cpp concurrency in action》 主讲线程细节 一 、线程上层接口1 asnc() and Futuresaysnc() :提供一个可运行在后台的接口，其功能实现调用通过回调函数future&lt;&gt; : 让你等待一个线程的运行结果，返回值或者异常shared_future&lt;&gt; : 与future不同的是，future取回的值只能被处理一次，而shared_future 可以被处理多次 example:123456789 int getValue() &#123;this_thread::sleep_for(chrono::seconds(2));return 3; &#125; main()&#123; auto result = future&lt;int&gt;(async([]() &#123;return 2; &#125;)).get()+getValue(); cout &lt;&lt; \"the value is :\" &lt;&lt; result &lt;&lt; endl; &#125; async() 函数有三个可选的状态 立刻运行 launch::async=0x1 推迟运行，在适当的机会运行 launch::deferred =0x2 默认状态，可能是立刻运行或者推迟运行 launch::async|launch::deferred 但是这三种状态都可以使用get()函数从而进行任务变化为运行的状态 而wait() 系列的函数则是被动的东岱，而不是强迫任务开始，get()则不然，是强迫你任务开始，而wait()对应三种状态： future_status::ready future_status::deferred future_status::timeout So, let me make clear: If you start to use async(), you should pass all objects necessary to process the passed functionality by value so that async() uses only local copies. If copying is too expensive, ensure that the objects are passed as constant reference and that mutable is not used 底层接口 ：threadthrad 使用方式：1thread t(function object); thread 没有launch 策略，c++标准库尽可能的开始一个传入的函数对象，如果不可行，会抛出一个system_error的错误 没有接口可以处理线程的输出结构和返回值，你只能获取一个独一无二的线程ID 如果一个异常发生，而你没有捕获，那么程序将立刻中断，给线程传递一个外部的异常指针变量exception_ptrs 你必须执行join()或者detach()操作，否则程序将发生中断 如果你让线程在后台运行，一旦main() 函数结束，所有的线程将会立刻中断 12 thread t([]() &#123;cout &lt;&lt; \"hello world\" &lt;&lt; endl; this_thread::sleep_for(chrono::seconds(3)); &#125;);t.join(); 1 detached threads分离线程如果使用了非局部变量很容易成为一个问题，因为你一旦分离了线程，就意味了你失去了对它的控制，那么至于它运行多久，我们就不知道了。因为有可能在非局部变量生命周期结束的时候，线程有可能还没有结束，那么你的线程很可能会出现问题。因此，强烈将以，你传递给线程从copy-value 的方式，而不是引用的方式。 2 Promises为了能够取回线程中的值，像async()一样，我们使用promises函数特性辅助123456789// start thread using a promise to store the outcomestd::promise&lt;std::string&gt; p;std::thread t([](string &amp;b)&#123;b=12;&#125;,std::ref(p));t.detach();...// create a future to process the outcomestd::future&lt;std::string&gt; f(p.get_future());// process the outcomestd::cout &lt;&lt; \"result: \" &lt;&lt; f.get() &lt;&lt; std::endl; 3 packeaged_task&lt;&gt;aysnc() 让你处理立刻执行还是推迟，然后返回结果，有时候，你可能需要自己决定什么时间怎么执行一个任务，那么packaged_task&lt;&gt;就是这个目的。1234567double compute (int x, int y);std::packaged_task&lt;double(int,int)&gt; task(compute); // create a taskstd::future&lt;double&gt; f = task.get_future(); // get its future...task(7,5); // start the task (typically in a separate thread)...double res = f.get(); // wait for its end and process result/exception note: thread.native_handle(): Returns a platform-specific type native_handle_type fornonportable extensions unsigned int std::thread::hardware_concurrency ()• Returns the number of possible threads. • This value is just a hint and does not guarantee to be exact. • Returns 0 if the number is not computable or well defined. 二 、同步并发处理相同的数据~ 相同数据：意味着相同的内存位置，如果不同线程处理不同的变量、对象或者不同的成员，自然也就没有问题啦，自c11，除了位域（bitfield），每个变量都被保证拥有自己的内存地址。并发的处理相同的数据，如果仅仅读是没有问题的，如果当一个超过1个线程修改了数据，那么就会陷入数据不同步的麻烦中，这也是数据竞争，也可以理解为不同线程间的矛盾处理，会产生未定义行为（undefined behave） 数据竞争带来的后果是，代码中是你想做的，但是实际输出结果不是你想要的 产生这种原因来源于编译器或者cpu的指令的优化~，首先我们得理解cpp对于并发的并发给了我们什么承诺（保证），像cpp 这样的编程语言总是抽象的支持在不同的硬件和平台上，根据他们的架构和目的，从而提供了不同的能力和接口，因而cpp规定了相应语句和操作产生的结果，并不是产生相应的汇编代码（assembler code）,cpp标准只要求结果，至于你怎么实现，却没有明确的定义。 因此，你不能期待编程语言给予你太多的承诺，实际上根据as-if rule,只要保证外部行为表现相同，每个编译器都通常选择优化代码，因此编译器产生的代码也是黑盒的。 我们也就知道，任何未定义的都可能是编译器和硬件提供商为了产生尽可能高效的代码导致的，比如：编译器可能会展开循环、打乱执行语句、消除无用代码、预取数据，并且在现代架构中，一个硬件缓冲区可能打乱存储和加载的顺序。 执行语句的乱序对于提高性能很有用，但是他们在并发中也极有可能破坏所期待结构的行为，因此，安全并不是默认保证的 可能会发生的错误数据处理不同步： 当两个线程并行处理读取和写入的操作，可能遇到以下情况 半写入数据：当一个线程正在读取数据，另一个线程正在修改数据，当读取数据读到写入的一般的时间，也是读取的状态既不是旧值也不是新值 乱序：对于每一个线程的行为可能是正确的，但是一旦讲所有线程联系起来，可能会产生不可预期的结果 但是cpp还是提供了一些先生安全保证 处理不同数据： 处理统一容器的不同位置的数据 并发处理流： 并发处理字符流，文件流，流缓冲区可能导致未定义行为，但是对于格式化输入输出标准流被同步于c i/o,是可能的，虽然他可能导致插入字符 1 解决方案为了保证正确并行数据，我们使用以下方案 原子操作 ：这意味着对于一个变量读取和写入都是原子的，或者语句的序列发生时排他性的，没有任何的中断，因此任何一个线程可以读取到新值。 保证执行顺序：我们需要保证一组特定的语句严格按照语句顺序执行，而不被编译器和硬件优化乱序执行。 接口从高到底的：future-&gt;promises-&gt;thread-&gt;mutex &amp; lock -&gt;condition variaable -&gt;atomic data type -&gt;fences1234567891011121314151617181920212223242526[风险低-&gt;高][性能低-&gt;高]``` 没有提到volatile的原因，在java中这个关键字提供原子性顺序执行，但是在cpp 中没有提供这种保证，仅仅指定处理外部资源~不应该被优化#### 2 mutex and lockmutex :用于控制并行处理资源的排他性，资源可能是一个对象、多个对象的集合体lock ：于mutex 统一使用辅助函数：完成初始化即使用的功能lock_guard&lt;&gt;unique_guard&lt;&gt;```c++std::mutex printMutex;void print(const std::string &amp;s)&#123; std::lock_guard&lt;std::mutex&gt; l(printMutex) for(auto elem : s)&#123; ....// handle ?process &#125; ...&#125;auto f1 =std::async(std::launch::async,print,\"hello\");auto f2 =std::async(std::launch::async,print,\"world\");f1.get();f2.get(); 3 递归锁 recursive_mutex循环锁定同一个信号量，典型的事例活动对象、监听器，内部包含了信号量和锁，但是其他方法同样包含，而且需要调用已经包含了信号量和锁的函数，则需要使用递归锁 123456789101112131415161718192021222324class DatabaseAccess&#123;private: std::recursive_mutex dbMutex; ... // state of database accesspublic: void insertData (...) &#123; std::lock_guard&lt;std::recursive_mutex&gt; lg(dbMutex); ... &#125; void insertData (...) &#123; std::lock_guard&lt;std::recursive_mutex&gt; lg(dbMutex); ... &#125; void createTableAndinsertData (...) &#123; std::lock_guard&lt;std::recursive_mutex&gt; lg(dbMutex); ... createTable(...); // OK: no deadlock &#125; ...&#125;; 4 try and timeout lock有时候，程序想要获取一个锁，但是却不想阻塞，这种情况下，信号量mutex提供了try_lock() 成员函数会尝试获取一个锁，如果成功返回true,反之false123456789std::mutex m;// try to acquire a lock and do other stuff while this isn’t possiblewhile (m.try_lock() == false) &#123; doSomeOtherStuff();&#125;std::lock_guard&lt;std::mutex&gt; lg(m,std::adopt_lock);// Note that try_lock() might fail spuriously. // That is, it might fail (return false) even if the lock is not taken.// This behavior is provided for memory-ordering reasons but is not widely known 如果你想指定一个时间的话，可以使用time_mutex123456std::time_mutex m;// try to acquire a lock and do other stuff while this isn’t possiblewhile (m.try_lock_for(std::chrono::seconds(1)) == false) &#123; doSomeOtherStuff();&#125;std::lock_guard&lt;std::mutex&gt; lg(m,std::adopt_lock); 一般而言，如果你想锁住超过1个以上的信号量，比如 传输一个受保护的资源向另一个受保护的资源 12345678910111213141516171819202122232425std::mutex m1;std::mutex m2;...&#123; std::lock (m1, m2); // lock both mutexes (or none if not possible) //Note that this lock() provides a deadlock-avoidance mechanism //which, however, means that the order of locking inside a multiple lock is undefined. /** * std::try_lock() * try_lock() does not provide a deadlock-avoidance mechanism. Instead, it guarantees * that the locks are tried in the order of the passed arguments */ std::lock_guard&lt;std::mutex&gt; lockM1(m1,std::adopt_lock); std::lock_guard&lt;std::mutex&gt; lockM2(m2,std::adopt_lock);...&#125; // automatically unlock all mutexes/** * only the code snippet*/lock_guard lg(m) //Creates a lock guard for the mutex m and locks itlock_guard lg(m,adopt_lock) //Creates a lock guard for the already locked mutex mlg.~lock_guard() unique_lock&lt;&gt; 如果说lock_guard&lt;&gt;仅仅提供简单的初始化即使用的功能，其内部仅仅完成了mutex.lock() mutex.unlock()~ 那么unique_lock&lt;&gt; 不但提供了lock_guard&lt;&gt;所具备的功能之外，还提供了更复杂的功能，他决定了你可以时间怎么去对一个信号量加锁和释放，因此这个锁的的对象可以在初始化的时候绑定信号量与否 从成员函数上来看，unique_lock&lt;&gt; 更为灵活，几乎和mutex保持着一致的成员函数~ 除吃之外，使用和lock_guard没有什么区别 call_onceSometimes multiple threads might not need some functionality that should get processed whenever the first thread needs it. A typical example is lazy initialization: The first time one of the threads needs something that has to get processed, you process it (but not before, because you want to save the time to process it if it is not needed). 5 条件变量 condition_variable有时候，一些线程需要等待其他线程执行的结果，因此你不得不因为一些其他原因不能够处理共享数据，而执行一些同步性的并行操作 future也可以处理这样的操作，一个线程等待另一个线程，但是只能处理一次，而实际上future的目的仅仅是为了返回值和异常 对于条件变量的实现，我们可以使用以下方式进行实现~ 123456789101112bool readyFlag;std::mutex readyFlagMutex;// wait until readyFlag is true:&#123; std::unique_lock&lt;std::mutex&gt; ul(readyFlagMutex); while (!readyFlag) &#123; ul.unlock(); std::this_thread::yield(); // hint to reschedule to the next thread std::this_thread::sleep_for(std::chrono::milliseconds(100)); ul.lock(); &#125;&#125; // release lock 我们完全可以使用以上的方式实现我们的目的，至于为什么不使用，以下给予了解释： 123456The waiting thread consumes valuable processing time repeatedly checking the flagand when it locks the mutex the thread setting the ready flag is blocked. ...In addition, it’s hard to get the sleep period right: too short a sleep in between checksand the thread still wastes processing time checking, too long a sleepand the thread will carry on sleeping even when the task it is waiting for is complete,introducing a delay 因而c++给我们提供了条件变量使用，condition_variable 和 mutex 一起配合使用, 123456789101112131415161718192021222324252627282930313233343536373839std::queue&lt;int&gt; queue;std::mutex queueMutex;std::condition_variable queueCondVar;void provider (int val)&#123; // push different values (val til val+5 with timeouts of val milliseconds into the queue for (int i=0; i&lt;6; ++i) &#123; &#123; std::lock_guard&lt;std::mutex&gt; lg(queueMutex); queue.push(val+i); &#125; // release lock queueCondVar.notify_one(); std::this_thread::sleep_for(std::chrono::milliseconds(val)); &#125;&#125;void consumer (int num)&#123; // pop values if available (num identifies the consumer) while (true) &#123; int val; &#123; std::unique_lock&lt;std::mutex&gt; ul(queueMutex); queueCondVar.wait(ul,[]&#123; return !queue.empty(); &#125;); val = queue.front(); queue.pop(); &#125; // release lock std::cout &lt;&lt; \"consumer \" &lt;&lt; num &lt;&lt; \": \" &lt;&lt; val &lt;&lt; std::endl; &#125;&#125;int main()&#123; // start three providers for values 100+, 300+, and 500+ auto p1 = std::async(std::launch::async,provider,100); auto p2 = std::async(std::launch::async,provider,300); auto p3 = std::async(std::launch::async,provider,500); // start two consumers printing the values auto c1 = std::async(std::launch::async,consumer,1); auto c2 = std::async(std::launch::async,consumer,2);&#125; 6 原子操作 atomic原子操作：意味着对于一个变量读取和写入都是原子的，与此同时通过atomic的成员函数来看，我们除了这些操作无法提供更为复杂的操作，比如对一个容器、结构体等共享变量做复杂的操作~ 因而，原子操作更适用于基本数据类型~ int /bool /point Lock-Free - 无锁技术越来越被开发人员重视，因为锁对于性能的影响实在是太大了，所以如果想开发出一个高性能的程序，你就非常有必要学习 Lock-Free 的编程方式 菜鸟 正在飞翔~~~~~ 三 、异步todo","categories":[{"name":"编程","slug":"编程","permalink":"http://yoursite.com/categories/编程/"},{"name":"cpp","slug":"编程/cpp","permalink":"http://yoursite.com/categories/编程/cpp/"},{"name":"多线程","slug":"编程/cpp/多线程","permalink":"http://yoursite.com/categories/编程/cpp/多线程/"}],"tags":[]},{"title":"cpp缓冲与流对象","slug":"cpp缓冲与流对象","date":"2019-03-04T13:50:56.000Z","updated":"2019-03-26T13:44:55.069Z","comments":true,"path":"2019/03/04/cpp缓冲与流对象/","link":"","permalink":"http://yoursite.com/2019/03/04/cpp缓冲与流对象/","excerpt":"","text":"如上图就是cpp 流的结构~ ios_base : 定义了所有流独立于字符类型和字符特征的共有的属性，这个类由流状态函数/流格式标记函数组成 basic_ios&lt;&gt; :定了所有流共有的属性但是依赖于字符类型和字符特征，这个属性包含了使用了派生自basic_streambuf&lt;&gt;的流缓冲区，这个缓冲区执行确切的读写能力。 basic_istream&lt;&gt; &amp;&amp; bacsic_ostream&lt;&gt; : 虚继承了basic_ios&lt;&gt; ，分别用来读写 basic_iostream&lt;&gt; : 派生自basic_istream&lt;&gt; &amp;&amp; bacsic_ostream&lt;&gt; 可以用来读和写 basic_streambuf&lt;&gt; : 是iostream 库的核心，定了接口用来写向流和从流中读取字符，这些接口可以被其他流使用执行读写能力 1. 责任划分 派生自basic_ios只用来处理数据的格式、流的状态，而字符的读写被basic_streambuf&lt;&gt;执行，流缓冲区提供给其他流接口用来处理字符读写{socket、graphic、user interface component} 2. 流对象类别 标准输入输出 :iostream 、istream 、ostream 文件流 : fstream 字符流 : stringstream 3. 流的状态 goodbit: 一切都是正常的，没有任何bit位被设置 eofbit : 到达文件结尾 failbit: 发生错误，i/o操作不成功 badbit : 致命的错误，产生未定义状态 对应的函数：good()、eof()、fail()、bad()、rdstate()、clear()、setstate() 4. 标准输入输出函数&lt;&lt; &amp;&amp; &gt;&gt;两个操作符是带有格式格式的输入输出方式，如果用户想用原生态数据（没有格式化），可以使用流的成员函数 4.1 输入成员函数 get() getline() read() readsome() 4.2 输出成员函数 put() write() flush() 4.3 流的辅助类 sentry辅助类形式1234sentry se(strm); // indirect pre- and postprocessingif (se) &#123;... // the actual processing&#125; 哨兵类用来做流对象的预处理和后处理的工作~ 这些操作包括：同步几个流，检查流是否正常，是否跳过空格，实现特定任务{多线程环境下，完成相应的锁定} 4.4 流格式操作头文件1#include&lt;iomanip&gt; 而对应的format 在std::ios::XXX 4.4.1 成员函数流对象中 setf unsetf flag copyfmt imbue //set local object [internationalization] getloc //get the local object [internationalization] 4.4.2全局函数这些函数在iomanip头文件中 setiosflags resetiosflags … 5. 文件流文件流派生自标准输入输出流，主要用于文件的读写 5.1 文件打开标记 in out app而这三者可以任意组合 5.2 文件随机处理指针输入流： tellg seekg 输出流： tellp seekp 6. 字符串流6.1 成员函数输出流 str() : 返回一个字符串 str(string) : 把string 设置成 输入流：“&gt;&gt;” 操作符，用来将缓冲区的数据输入到特定的类型 7. 输入流和输出流的连接通常而言，你需要连接两个流，比如可能需要确保在读取输入之前在屏幕上写入要求输入的文本，读写使用同一个流，操作相同的流使用不同的数据格式 7.1 成员函数 tie() :返回一个已经绑定到流上的输出流指针 tie(ostream *strm) : 设置输出流对象，返回之前的流指针 7.2流缓冲区的绑定/释放 rdbuf() :返回流缓冲区的指针 rdbuf(streambuf* ) :设置流缓冲区，返回之前的缓冲区对象指针。 利用流缓冲区的绑定和释放，我们可以实现重定向的作用1234567891011121314151617181920212223242526#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;memory&gt;using namespace std;void redirect(ostream&amp;);int main()&#123; cout &lt;&lt; \"the first row\" &lt;&lt; endl; redirect(cout); cout &lt;&lt; \"the last row\" &lt;&lt; endl;&#125;void redirect (ostream&amp; strm)&#123;// save output buffer of the stream// - use unique pointer with deleter that ensures to restore// the original output buffer at the end of the function auto del = [&amp;](streambuf* p) &#123; strm.rdbuf(p); &#125;; unique_ptr&lt;streambuf,decltype(del)&gt; origBuffer(strm.rdbuf(),del); // redirect ouput into the file redirect.txt ofstream file(\"redirect.txt\"); strm.rdbuf (file.rdbuf()); file &lt;&lt; \"one row for the file\" &lt;&lt; endl; strm &lt;&lt; \"one row for the stream\" &lt;&lt; endl;&#125; // closes file AND its buffer automatically 基本上基础关于流的基础知识也就是这么多~ 对于流缓冲区的使用，用户自定义模式~，这一步，将单独写一篇博客用来描述 sleeping~","categories":[{"name":"编程","slug":"编程","permalink":"http://yoursite.com/categories/编程/"},{"name":"cpp","slug":"编程/cpp","permalink":"http://yoursite.com/categories/编程/cpp/"},{"name":"STL(类对象)","slug":"编程/cpp/STL-类对象","permalink":"http://yoursite.com/categories/编程/cpp/STL-类对象/"}],"tags":[]},{"title":"GoWeb <1>","slug":"goWeb","date":"2019-03-03T15:38:19.000Z","updated":"2019-03-18T12:20:15.026Z","comments":true,"path":"2019/03/03/goWeb/","link":"","permalink":"http://yoursite.com/2019/03/03/goWeb/","excerpt":"","text":"","categories":[{"name":"编程","slug":"编程","permalink":"http://yoursite.com/categories/编程/"},{"name":"go","slug":"编程/go","permalink":"http://yoursite.com/categories/编程/go/"}],"tags":[]},{"title":"个人博客简介","slug":"个人博客简介","date":"2019-03-02T09:37:11.000Z","updated":"2019-03-12T14:45:09.518Z","comments":true,"path":"2019/03/02/个人博客简介/","link":"","permalink":"http://yoursite.com/2019/03/02/个人博客简介/","excerpt":"","text":"毕业已有2年左右的时间~ 工作以后，一次和同学电话中通话中谈及了博客~ 博客，也许是锻炼你整理、表达思路的一种很好的方式~，将你所知道的所学的整理记录 于是我的博客开始诞生~ 此博客是在18年12月来开始建起来的~ ，恰好这段时间利用下班和周末的时间学习golang语言，于是博客内容大多呈现了golang 工作使用语言为c/cpp，之后，我也会陆续的写cpp的文章~ 关于cpp可能重点放在模板、并发、容器这一块~ 之后可能会在编译原理、数据库、网络协议 以及计算机系统原理上 身为一个IT人士，我热爱这个职业，或者说性格使然~ 从小不是很擅长与人打交道，喜爱独自一个人~ 独自一人~，看书是一个不错的消遣方式~ 哈~，工作以后~主要都是技术书~，想着未来要吃着一碗饭，于是乎到时看了不少~ ，内容有懂的，有不懂的~ 随后~ 再看到其他书的时候，很多问题也在看看慢慢理解~ 加油~！ 奋斗的小子~~ 最后给自己送上一首来自Max Ehrmann 的《Desiderata 》 Go placidly amid the noise and haste,and remember what peace there may be in silence.As far as possible without surrenderbe on good terms with all persons.Speak your truth quietly and clearly;and listen to others,even the dull and the ignorant;they too have their story. Avoid loud and aggressive persons,they are vexations to the spirit.If you compare yourself with others,you may become vain and bitter;for always there will be greater and lesser persons than yourself.Enjoy your achievements as well as your plans. Keep interested in your own career, however humble;it is a real possession in the changing fortunes of time.Exercise caution in your business affairs;for the world is full of trickery.But let this not blind you to what virtue there is;many persons strive for high ideals;and everywhere life is full of heroism. Be yourself.Especially, do not feign affection.Neither be cynical about love;for in the face of all aridity and disenchantmentit is as perennial as the grass. Take kindly the counsel of the years,gracefully surrendering the things of youth.Nurture strength of spirit to shield you in sudden misfortune.But do not distress yourself with dark imaginings.Many fears are born of fatigue and loneliness.Beyond a wholesome discipline,be gentle with yourself. You are a child of the universe,no less than the trees and the stars;you have a right to be here.And whether or not it is clear to you,no doubt the universe is unfolding as it should. Therefore be at peace with God,whatever you conceive Him to be,and whatever your labors and aspirations,in the noisy confusion of life keep peace with your soul. With all its sham, drudgery, and broken dreams,it is still a beautiful world.Be cheerful.Strive to be happy.","categories":[],"tags":[]},{"title":"数据类型<map>","slug":"goDataMap","date":"2019-03-01T13:35:48.000Z","updated":"2019-03-18T12:24:27.189Z","comments":true,"path":"2019/03/01/goDataMap/","link":"","permalink":"http://yoursite.com/2019/03/01/goDataMap/","excerpt":"","text":"今天周五 ~ 同事离职里，是一个很不错的人~ 下班后一起开心的吃了一个饭~ map 该怎么说这个数据结构呢,map 有键值对的组成的，内置hash算法对值时刻进行放置 cpp 中关于map的容器都有map/unorder_map /mutilmap /unorder_map 四种类型，其中mutil 前缀表示key可以重复 ,unorder前缀用来表示插入值的时候不需要排序，一般没有什么特殊的要求~,我们在cpp 中都是使用unordered_map这种容易。 在golang中的map 其实和unordered_map这种容器很相似，具体体现：1&gt;key是唯一的 2&gt;内部没有排序 golang map声明1234567891011var mymap map[type]type //nil//ormymap:=make(map[type]type) //len==0,but mymap!=nilmymap[\"string\"]=int(2)// 例子//嵌套mapvar mymap map[type]map[type]int//ormymap:=make(map[type]map[type]int)myint:=mymap[type][type] 看起来的好像map使用挺方便的，实际上，在我们插入的时候，进行了key的比较~，这里的比较不是排序的比较，而是操作符“==”的比较，那么至少就要求我们要对map变量key必须key可以比较。 那我们知道在golang 中slice /float 很难进行比较多的，但是我们又想让他们成为我们的key，这时候我们就要将这些 key 做一些处理，将其转化为我们可以比较的类型/方式 map 的排序输出 我们知道map输出的元素是不一定的，但是有时候，我们需要将其排序输出那么该怎么办~ 实际上，我们可以采用一种折中的方式进行处理，首先我们使用range 函数将 key set进行排序，之后通过索引map的key进行输出，从而达到，排序输出的目的","categories":[{"name":"编程","slug":"编程","permalink":"http://yoursite.com/categories/编程/"},{"name":"go","slug":"编程/go","permalink":"http://yoursite.com/categories/编程/go/"}],"tags":[]},{"title":"数据类型 <数组&切片&结构体>","slug":"goAndCpp","date":"2019-02-28T16:04:57.000Z","updated":"2019-03-18T12:19:50.245Z","comments":true,"path":"2019/03/01/goAndCpp/","link":"","permalink":"http://yoursite.com/2019/03/01/goAndCpp/","excerpt":"","text":"今天晚上我想说的是 go 中的数组和切片 自然而言的也想起了cpp中的一些玩意 数组:1234array:=[2]int&#123;&#125;//orarray:=[...]int&#123;&#125;//or 切片：12345slice:=[]int&#123;&#125;//orslice:=make([]int,0)//orvar slice []int 好像也没太大的区别嘛 从声明上看，唯一的差别就是数组固定了长度，切片没有固定的长度 嗯 ~ ，其他差别呢~ 数组比较 如果在cpp 中呢1234int a[] = &#123; 1,2,4,5,6 &#125;;int b[] = &#123; 1,2,4,5,6 &#125;;cout &lt;&lt; \"the value is equality ? :\" &lt;&lt;boolalpha &lt;&lt;(a == b) &lt;&lt; endl;//output is : false 想想也是呢， 好歹人家也是数组也是可以当指针用来着，在不同的内存空间来着，地址不同，自然也就不同 但是在go中1234array1:=[3]int&#123;1,2,3&#125;array2:=[...]int&#123;1,2,3&#125;array1==array//output: true 相等的~！ 嗯~ 在go中，好像把数组当成了一 基本类型再用 那你想啊，这不是还有切片啊 不过这个切片的确是不能比较的，他们只能和nil 进行比较 这个切片是scale型，又区别cpp的数组，行为倒是和vector容器有些相似~ 因为内部同样有两个变量可控制，你可以理解为下面的形式 1234type slice struct&#123; ptr * int//or other type //uint float32... len ,cap uint&#125; 一旦超过容量cap ,人家也是要扩展的，这时候可能返回的指针会发生~~~~ 切片人家还是安全性的 你要判断一个切片是否为空，最好使用len()函数 而不是使用 slice==nil的形式 ，因为 slice:=[]int{} 这种情况下 切片不为空 好像说了半天，也不知道切片是干嘛的 嗯~ 其实切片就是一个可以添加/修改/返回元素子序列的操作 append():用来添加一个/多个元素 ，或者自身 /其他切片 slice[:]：用来返回子序列的 ，也返回了一个新的切片和原来的没关系 由于这种特性~ 使得切片也变得相当灵活~ 比如你可以完全用它实现一个stack/queue 数据结构 用它拼接字符串 自由的插入字符 结构体 结构体是基本类型的集合，在golang 中结构体支持anonymous struct，从而避免重复定义。 . . . sleeping","categories":[{"name":"编程","slug":"编程","permalink":"http://yoursite.com/categories/编程/"},{"name":"go","slug":"编程/go","permalink":"http://yoursite.com/categories/编程/go/"}],"tags":[]},{"title":"生活小记2","slug":"life-record2","date":"2019-02-25T14:46:48.000Z","updated":"2019-02-25T15:12:22.978Z","comments":true,"path":"2019/02/25/life-record2/","link":"","permalink":"http://yoursite.com/2019/02/25/life-record2/","excerpt":"","text":"2019 / 2 / 25 能够阻挡得似乎是你 能够说服你的还是你 能够原谅你的还是你 . . . 我曾羡慕过很多人 现在依旧，未来还是 但是似乎我并讨厌自己现在的处境 我喜欢努力的自己 不够用心的努力的你，让我不甚喜欢 很多世俗的道理，你看过，你听过，你经历过 但是并不意味，你一定去选择接受与否 喜欢你用心的感受这个世界 学会感受 不论是否喜欢，有时候选择去经历一下，好像也并没有那么糟 对于这个大千世界，你是一个孩子 不要放弃任何学习的机会，很多时候并不是能力限制了你 而是你自己成为了你的阻碍 请多请教，多思考 今日起的你，应该面带笑容 是发自内心的笑容 是自我承认的笑容 是勇敢面对的笑容 是欣赏他人的笑容 是尊重他人的笑容 你看，你还真不够成熟 u just a kid just run chasing the sunset","categories":[{"name":"个人生活","slug":"个人生活","permalink":"http://yoursite.com/categories/个人生活/"}],"tags":[]},{"title":"数据类型<平衡树>","slug":"GoTree","date":"2019-02-22T01:26:00.000Z","updated":"2019-03-18T12:20:04.987Z","comments":true,"path":"2019/02/22/GoTree/","link":"","permalink":"http://yoursite.com/2019/02/22/GoTree/","excerpt":"","text":"本篇使用go语言实现二叉树 二叉树结构二叉树的创建与c/c++创建并无多大的异处。其关键之处还是在于掌握好一级指针和二级指针的使用，go语言同样支持这两种指针 本次使用的数据结构一切从简，不适用sentinel模式12345type TreeNode struct &#123; Val int Left *TreeNode Right *TreeNode&#125; 创建123456789 func createTree(tree **TreeNode, val int) &#123; Treetmp := &amp;TreeNode&#123;val, nil, nil&#125; if nil == *tree &#123; *tree = Treetmp &#125; else if val &gt; (*tree).Val &#123; createTree(&amp;(*tree).Right, val) &#125; else &#123; createTree(&amp;(*tree).Left, val)&#125; 在这里你可能好奇 Treetmp 地址离开了作用域利用消失，此值无效，关于这个答案，我在《The Go Programming Language》 It is perfectly safe for a function to return the address of a local variable … Because the lifetime of a variable is determined only by whether or not it is reachable, a localvariable may outlive a single iteration of the enclosing loop. It may continue to exist even afterits enclosing function has returned. 因而 ，这也是优化点 遍历1234567func print(tree *TreeNode) &#123; if nil != tree &#123; fmt.Println(tree.Val) print(tree.Left) print(tree.Right) &#125;&#125; avl 平衡二叉树失衡有四种模式，LL 、LR、RR、RL 以下实现了两种方式avl: 基本函数：1234567891011121314151617181920212223242526func LLTree(root **TreeNode) &#123; newRoot := (*root).Left oldRight := newRoot.Right newRoot.Right = *root (*root).Left = oldRight (*root) = newRoot&#125;func RRTree(root **TreeNode) &#123; newRoot := (*root).Right oldLeft := newRoot.Left //old root will get left node newRoot.Left = *root (*root).Right = oldLeft (*root) = newRoot&#125;func LRTree(root **TreeNode) &#123; RRTree(&amp;(*root).Left) LLTree(root)&#125;func RLTree(root **TreeNode) &#123; LLTree(&amp;(*root).Right) RRTree(root)&#125; 获取树的深度：1234567891011func getMaxDepth(root *TreeNode) int &#123; if nil == root &#123; return 0 &#125; leftDepth := getMaxDepth(root.Left) + 1 RightDepth := getMaxDepth(root.Right) + 1 if leftDepth &gt; RightDepth &#123; return leftDepth &#125; return RightDepth&#125; 将一颗失衡的数，进行平衡 1234567891011121314151617181920212223242526272829303132333435func B2Tree(root **TreeNode) int &#123; if nil == *root &#123; return 0 &#125; leftDepth := B2Tree(&amp;(*root).Left) + 1 RightDepth := B2Tree(&amp;(*root).Right) + 1 if leftDepth-RightDepth &gt;= 2 &#123; //LX if B2Tree(&amp;(*root).Left) &gt; B2Tree(&amp;(*root).Right) &#123; //LL LLTree(root) return getMaxDepth(*root) &#125; else &#123; //LR LRTree(root) return getMaxDepth(*root) &#125; &#125; else if RightDepth-leftDepth &gt;= 2 &#123; //RX if B2Tree(&amp;(*root).Left) &gt; B2Tree(&amp;(*root).Right) &#123; //RL RLTree(root) return getMaxDepth(*root) &#125; else &#123; //RR RRTree(root) return getMaxDepth(*root) &#125; &#125; else &#123; if leftDepth &gt; RightDepth &#123; return leftDepth &#125; return RightDepth &#125;&#125; 边插入边平衡 12345678910111213141516171819202122232425262728func createTreeBT(tree **TreeNode, val int) &#123; Treetmp := &amp;TreeNode&#123;val, nil, nil&#125; if nil == *tree &#123; *tree = Treetmp &#125; else if val &gt; (*tree).Val &#123; createTree(&amp;(*tree).Right, val) if getMaxDepth((*tree).Right)-getMaxDepth((*tree).Left) &gt;= 2 &#123; if val &gt; (*tree).Right.Val &#123; //RR RRTree(tree) &#125; else &#123; //RL RLTree(tree) &#125; &#125; &#125; else &#123; createTree(&amp;(*tree).Left, val) if getMaxDepth((*tree).Left)-getMaxDepth((*tree).Right) &gt; 2 &#123; if val &gt; (*tree).Left.Val &#123; //LR LRTree(tree) &#125; else &#123; //LL LLTree(tree) &#125; &#125; &#125;&#125;","categories":[{"name":"编程","slug":"编程","permalink":"http://yoursite.com/categories/编程/"},{"name":"go","slug":"编程/go","permalink":"http://yoursite.com/categories/编程/go/"}],"tags":[]},{"title":"概述（2）","slug":"goGoroutine","date":"2019-02-17T14:24:47.000Z","updated":"2019-03-18T12:24:22.891Z","comments":true,"path":"2019/02/17/goGoroutine/","link":"","permalink":"http://yoursite.com/2019/02/17/goGoroutine/","excerpt":"","text":"并发关键字go GoLang 使用go 关键字进行多并发操作 123456789//example 1go func()&#123; fmt.Println(\"hello world\")&#125;//example 2func hello()&#123; fmt.Println(\"hello world\")&#125;go hello() 同步操作: channelGoLang 使用Channels 进行多个协程之间进行同步操纵，它更像是一个管道，发送值到管道，再从值取回来 等待channel 操作 : selectgo 与 channel 结合select 是一个强大的工作123456789101112131415161718c1 := make(chan string, 1)c2 := make(chan string, 1)go func() &#123; time.Sleep(2 * time.Second) c1 &lt;- \"hello\"&#125;()go func() &#123; time.Sleep(5 * time.Second) c2 &lt;- \"world\"&#125;()for index := 0; index &lt; 2; index++ &#123; select &#123; case msg1 := &lt;-c1: fmt.Println(\"the msg1 value is : \", msg1) case msg2 := &lt;-c2: fmt.Println(\"the msg2 value is : \", msg2) &#125;&#125; 定时器timeer1234// 只执行指定时间 一次mytime:=time.NewTimer(time.second)&lt;-mytime.Cmytime.stop() ticker123456myticker:=time.NewTicker(time.second)for &#123; &lt;-myticker.C fmt.Println(time.now())&#125;myticker.stop()","categories":[{"name":"编程","slug":"编程","permalink":"http://yoursite.com/categories/编程/"},{"name":"go","slug":"编程/go","permalink":"http://yoursite.com/categories/编程/go/"}],"tags":[]},{"title":"概述（1）","slug":"gonovice","date":"2019-02-17T04:03:45.000Z","updated":"2019-03-18T12:20:08.740Z","comments":true,"path":"2019/02/17/gonovice/","link":"","permalink":"http://yoursite.com/2019/02/17/gonovice/","excerpt":"","text":"变量变量 12345678910111213141516171819var name nametype// for example var myvar int /float32 /string /boolvar myvar = 12 /12.2/true/\"hello\" //infer the var typemyvar := 12 /12.2/true/\"hello\" //must use : operator characteristic//pointervar name *nametype//切片和数组类似，不过切片比数组支持更多的操作//你可以将其理解为数量不等的集合//申请0个空间是一种位置，随后使用的时候，可以在进行申请空间//相对而言，slice更加方便一些//arrayvar arrayname [][]int /float32/string /bool//slicessilces:=make(type,length)//map dictionarymapName:=make(map[key-type]value-type) 控制结构控制结构只有三种形式： for 循环123for [[initialize][;condition;][caculate]]&#123;&#125; if 条件123if [initialize ;][condition]&#123;&#125;[else if&#123;&#125;][else&#123;&#125;] switch 条件123456switch [condition] &#123; case [result[condition]]: [break] default: [break]&#125; 遍历通过for 循环语句是使用关键字range 遍历数组/切片/map1234for [key/index[_]] ,value :=range mapvar&#123; //todo //execute some statement&#125; 函数函数声明形式123func [funName]() return-type&#123;&#125; 根据函数形式大致为了以下几种： 普通函数1234//examplefunc plus(a,b int)int&#123; return a+b&#125; 可变参数函数12345678910 //example func sum(nums ...int) &#123; fmt.Print(nums, \" \") total := 0 for _, num := range nums &#123; total += num &#125; fmt.Println(total) &#125;&#125; 匿名函数12//example fmt.Println(\"the return value is : \", func() int &#123; return 4 &#125;()) 闭包函数12345678910111213//examplefunc initSqu() func()int &#123; i:=0 return func()int&#123; i++ return i &#125;&#125;//to use nextInit:=initSqu()nextInit() //1nextInit() //2//because they hava function address 递归函数123456789//recusionfunc factorial(n int) int&#123; if 0==n &#123; return 1 &#125; return n*factorial(n-1)&#125;//to usefmt.println(\"the factorial value is : \",factorial(3)) 结构体与方法/接口123456789101112131415161718192021222324252627282930313233//接口type geometry interface &#123; area() float64 perimeter() float64&#125;//example //结构体type rect struct&#123; width,height float64&#125;type circle stuct&#123; radius float64&#125;// 方法func (r rect) area() float64&#123; return r.width*r.hight&#125;func (r rect) perimeter float64&#123; return r.width*2 + r.hight*2&#125;func (c circle) area float64&#123; return math.Pi * c.radius * c.radius&#125;func (c circle) perimeter() float64&#123; return 2 * math.Pi * c.radius&#125;//to use func measure(g geometry)&#123; fmt.Println(g.area()) fmt.Println(g.perimeter())&#125;rcValue:=rect&#123;12,2&#125;measure(rcValue)","categories":[{"name":"编程","slug":"编程","permalink":"http://yoursite.com/categories/编程/"},{"name":"go","slug":"编程/go","permalink":"http://yoursite.com/categories/编程/go/"}],"tags":[]},{"title":"生活小记","slug":"life_record1","date":"2019-02-16T00:38:45.000Z","updated":"2019-02-25T15:04:29.614Z","comments":true,"path":"2019/02/16/life_record1/","link":"","permalink":"http://yoursite.com/2019/02/16/life_record1/","excerpt":"","text":"2019 / 2 / 16 乌鲁木齐机场 打开电脑随手写下了这篇文章，就想到哪写到哪了 [ 02 / 16 上午] 与昨日，我与母亲倾诉了内心的想法：我到底改往何方 母亲回了我一句：去年我曾劝过你，留在事业单位，现在你后悔嘛 我愣了一下 [ 02 / 15 下午] 在乌市出发前碰到了我儿时的同学 【张】 于是开玩笑道：给我5元钱，我帮你承担 [考研] 成绩的压力 晚上，我们在一起吃了个饭，我问他想去哪 他话语间流露，想要出去走走，不想呆在新疆了，他说这个地方他呆够了，现在他特别想到处逛逛 “你准备在成家？” 他说：“在江苏吧，也许其他地方…” 晚上的《流浪地球》挺好看的 晚上，继昨天一样，失眠了 我已经不记得儿时曾经发过什么誓言，想要成为什么样的人 我也不知道我是不是成为了自己讨厌的人 . . . 今年我26 ，而我的路，我不知道该向哪里 甚至看书，有时候都在发呆 我不知道您是否被这么一句话所影响 : 走正确的路 什么是正确的路啊 蒙上眼睛，走那个方向都是前方 . . .","categories":[{"name":"个人生活","slug":"个人生活","permalink":"http://yoursite.com/categories/个人生活/"}],"tags":[]},{"title":"求二叉树的路径和(path sum)","slug":"task-shchedule-weight","date":"2018-12-10T06:36:12.000Z","updated":"2019-03-03T13:21:05.977Z","comments":true,"path":"2018/12/10/task-shchedule-weight/","link":"","permalink":"http://yoursite.com/2018/12/10/task-shchedule-weight/","excerpt":"","text":"Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum. Note: A leaf is a node with no children. Example: Given the below binary tree and sum = 22,1234567 5 / \\ 4 8 / / \\ 11 13 4 / \\ \\7 2 1 return true, as there exist a root-to-leaf path 5-&gt;4-&gt;11-&gt;2 which sum is 22. 看到这道题，嗯~ 其实我锁定的本题的字眼在 “root-to-leaf”，这就是说明，至少你要从根节点一直遍历到叶节点为止。讲所有的叶节点遍历完之后，也就得到了多少个答案，然后从答案中筛选出预期的结果。 遍历的图比较好的方式一般使用递归的方式，因为迭代会使程序写法变得复杂~ 12345678910111213141516171819202122232425262728293031323334353637383940414243 /** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: void calcuSum(struct TreeNode* root, int sum) &#123; if (nullptr != root) &#123; if(nullptr!=root-&gt;left&amp;&amp;root-&gt;right==nullptr) calcuSum(root-&gt;left, sum + root-&gt;val); if(nullptr != root-&gt;right&amp;&amp;root-&gt;left==nullptr) calcuSum(root-&gt;right, sum + root-&gt;val); if (nullptr != root-&gt;left&amp;&amp;nullptr != root-&gt;right) &#123; calcuSum(root-&gt;left, sum + root-&gt;val); calcuSum(root-&gt;right, sum + root-&gt;val); &#125; if (nullptr == root-&gt;left&amp;&amp;nullptr == root-&gt;right) &#123; //or calcuSum(root-&gt;right, sum + root-&gt;val); calcuSum(root-&gt;left, sum + root-&gt;val); &#125; &#125; else &#123; result.insert(sum); &#125; &#125; bool hasPathSum(TreeNode* root, int sum) &#123; if(nullptr==root)&#123; return false; &#125; calcuSum(root,0); if(result.find(sum)!=result.end())&#123; return true; &#125;else&#123; return false; &#125; &#125;private: set&lt;int&gt; result;&#125;; 根据鄙人的解题思路~ 写出上了以上代码~ 上诉考虑到了容器的选择，我使用了set容器，主要是考虑从查找效率上。其实容器也可以选择vector，这个影响不是很大。 有了上诉题目的引子~ 根据查找的结果，显示出路径来，题目如下： Given a binary tree and a sum, find all root-to-leaf paths where each path’s sum equals the given sum. Note: A leaf is a node with no children. Example: Given the below binary tree and sum = 22,12345678910111213 5 / \\ 4 8 / / \\ 11 13 4 / \\ / \\7 2 5 1Return:[ [5,4,11,2], [5,8,4,5]] 这道题和上一题一样的，不同的是，我们需要记录路径了，路径怎么记录~ 这时候，我们可以使用容器vector&lt;&gt;，然后利用形参的copy作用，讲所有root-to-leaf路径存储起来，我们只需要将上面例子的int num,换成vector就行了，然后将这个值存储起来即可~~~","categories":[{"name":"Leetcode","slug":"Leetcode","permalink":"http://yoursite.com/categories/Leetcode/"}],"tags":[]},{"title":"路由器数据层","slug":"router-data-plane","date":"2018-12-09T09:10:21.000Z","updated":"2019-03-18T14:49:19.652Z","comments":true,"path":"2018/12/09/router-data-plane/","link":"","permalink":"http://yoursite.com/2018/12/09/router-data-plane/","excerpt":"","text":"网络层有两个关键的功能 转发 当一个数据包到达输入端口时，router 移动数据包到合适的输出端口 路由 在整个网络中，局域网/广域网等 数据包从源地址到目的路之间的传输路径，而路径的选择时路由，一般路由可能时路由算法控制，或者手动设置 本篇重点放在路由器转发上面 router component input ports 执行物理层/链路层功能，同时还会执行检索功能对输入的数据进行检索，然后输出到合适的 output ports output ports 存储从switch fabric 处过来的数据包，然后转发这些这些数据包到出口[outgoing link：链接到链路层和物理层] switch fabric 连接 input port 和output port routing processor 执行control-plane 功能，一般用于路由协议 forward based information一般来说，转发大致基于两种情况 基于目的IP 此种方式根据数据包目的IP，然后对照路由表，选择合适的输出端口 基于全部信息 相对的，此种方式就不仅仅依据目的IP了，与此同时参考的信息还会有：源目的、网络拥塞状态等 switch fabricswitch fabric是路由器的核心，数据包从input port 穿过switch fabric 然后到 output port ，switch fabric 有一下几种实现方式 switching via memory 传统的router实现方式，数据包从input port 到达之后，通过中断的方式通知 router processor，然后共享内存复制数据包到合适的output ports buffers switching via bus input port 直接通过bus 传输数据包到output port,由于bus只有一条，因此不能同时传输数据，转发速度受制于bus的转发速度 switching via an interconnection network interconnection network 使用cross-bar 的方式，这就意味着N-N的转发方式 queue delay无论是input port 还是output port 都会发生queue delay ,也就是wait的意思 input port queue 当switch fabric 处理速度赶不上 input port 速度的时候 output port queue 多个数据包被转发到相同的output ports，当output ports buffer 满了的时候，就会发生packet drop 事件 outgoing link packet schedule FIFO 最先进入queue的数据包最新被转发出去 priority 根据优先级/权重对数据包进行分类[class i]，然后循环遍历classes,输出queue 中的数据包","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://yoursite.com/categories/计算机网络/"}],"tags":[]},{"title":"android NDK","slug":"android-NDK","date":"2018-12-05T08:59:50.000Z","updated":"2019-03-26T13:40:31.917Z","comments":true,"path":"2018/12/05/android-NDK/","link":"","permalink":"http://yoursite.com/2018/12/05/android-NDK/","excerpt":"","text":"最近维护了公司的一个JNI项目，面向java/android平台使用，有幸接触了Java/Android 平台与c/c++ 的交互使用。 Java 与 c/c++ 交互使用 dll 形式 Android 与c/C++ 交互使用.so文件格式 预备知识JNI 基础概念 JNI 编程基础 android.mk 编写 假使我认为您已经能够使用c/c++ 编程，基本能够使用android studio的使用，不使用亦可以 Java 使用dllc语言头文件生成 使用javac javaName.java 生成.class 文件 使用javah javaName 生成 .h 头文件 note: 倘如您的java中有包名，那么退回到包名的根目录，使用以下形式的命令 javac com\\application\\javaName.java 生成.class 文件 avah com.application.javaName 生成 .h 头文件 如下图 本实验的代码： jni_md.h /jni.h 文件在安装的JDK进行提供 MainJava.java 12345678910 public class MainJava &#123; static&#123; System.loadLibrary(\"MainJava\"); &#125; public native String printTest(); public static void main(String[] args) &#123; System.out.println(new MainJava().printTest()); &#125;&#125; MainJava.h 123456789101112131415161718192021/* DO NOT EDIT THIS FILE - it is machine generated */#include \"jni.h\"/* Header for class MainJava */#ifndef _Included_MainJava#define _Included_MainJava#ifdef __cplusplusextern \"C\" &#123;#endif/** Class: MainJava* Method: printTest* Signature: ()Ljava/lang/String;*/JNIEXPORT jstring JNICALL Java_MainJava_printTest(JNIEnv *, jobject);#ifdef __cplusplus&#125;#endif#endif MainJava.c 12345 #include\"MainJava.h\"JNIEXPORT jstring JNICALL Java_MainJava_printTest (JNIEnv *env, jobject thisobj)&#123; return (*env)-&gt;NewStringUTF(env,\"this is c level\"); &#125; makefile 12345678910CC=gccRESULT=MainJava.dllCFLAG= -Wall -sharedsource=*.c$(RESULT):$(source) $(CC) $(CFLAG) $^ -o $@clean: del $(RESULT) Android使用 .so 文件生成 .so文件可以使用android studio中的内置的NDK-build ，也可以选择手动生成，我这里使用手动生成。NDK-build下载 需要将javac/javah 生成的 .h /.c /android.mk application.mk 文件放入jni 文件夹中，然后在此目录中运行ndk-build 命令 如下图 将生成的libs 拷贝到android 项目中的app/libs下面 在app/build.gradle中加入 123456.....sourceSets&#123; main&#123; jniLibs.srcDirs=['libs'] &#125;&#125; 效果如下 后语对于一些使用底层代码使用c/c++的程序，常常使用这种方式，移植到其他平台上，android/java 作为业务层呈现","categories":[{"name":"编程","slug":"编程","permalink":"http://yoursite.com/categories/编程/"},{"name":"cpp","slug":"编程/cpp","permalink":"http://yoursite.com/categories/编程/cpp/"},{"name":"DLL交互","slug":"编程/cpp/DLL交互","permalink":"http://yoursite.com/categories/编程/cpp/DLL交互/"}],"tags":[{"name":"NDK","slug":"NDK","permalink":"http://yoursite.com/tags/NDK/"}]},{"title":"TCP 传输机制","slug":"TCP-transport-institution","date":"2018-11-15T00:40:55.000Z","updated":"2019-03-18T14:48:19.750Z","comments":true,"path":"2018/11/15/TCP-transport-institution/","link":"","permalink":"http://yoursite.com/2018/11/15/TCP-transport-institution/","excerpt":"","text":"说起TCP，第一印象是什么，嗯，可靠，面向连接。面向连接是每一个连接都是独立的。而对于可靠性，我的理解逻辑则按照下面的流程 TCP 流控制流控制涉及到了TCP中windows size fidld,对于TCP而言，在每一个TCP成功建立的连接都会初始化两个缓冲区，发送缓冲区和接收缓冲区，window size 的字段就是为了防止缓冲区数据溢出从而做出了设置，对于接收者，我们假设有两个变量 LastByteRead：从缓冲区最后读取的位置 LastByteRcvd：从缓冲区最后接收数据的位置 RcvBuffer：缓冲区的大小LastByteRcvd-LastByteRead&lt;=RcvBuffer 因而，我们要将通常将window size 设置成 cwnd = RcvBuffer-LastByteRcvd-LastByteRead，从而保证接收缓冲区不被溢出。相应的发送缓冲区 LastByteSent−LastByteAcked≤ cwnd 运用这一规则，在网络攻击中将windows size的值设置为1，就构成了http slow 攻击。 TCP 拥塞控制首先大部分TCP拥塞控制时端对端的。相对应的有一个网络协助方式（network-assist） 如果说流控制是控制避免TCP 缓冲区溢出，那么congestion control 就是在网络状态不好时，对TCP 发送流量进行控制，从而避免大量数据包丢失。 拥塞控制在TCP数据段中没有相应字段表示，但是还有有一个字段与他相关，那是ACK这个字段，拥塞能控制会根据接收到的ACK情况从而调整他的发送速率。 在TCP 发送数据过程中有三个阶段：此图来自《computer networking top to down》 从上图的状态图可以看到： 在slow start:一旦正确接收到ack,那么cwnd增长时指数级别的，一旦发生数据超时，拥塞控制状态中，此时cwnd数值除以2。或者接收到3此重复的ACK（超时之前），进入快速重传阶段。 拥塞控制：在这个阶段，cwnd数据增长就比较慢了，由于各个平台实现TCP差异，但是总的原则不会变，他增长速率，同样的在这个状态下，一旦发送超时，或者ACK重复的情况，依旧会Cwnd 数值减半 快速恢复：这个状态不是必要存在的，进入此状态的条件时ACK 重复，此状态结束之后，一般会进入拥塞控制阶段 TCP 流量竞争 一般来说，理想情况下，TCP连接时会平分网络节点的吞吐量的，但是由于每个TCP通过的路径的可能会有所差异，导致的网络状态的波动之类的情况，导致拥塞控制，可能会造成TCP流量的不平均的情况，因而，每个应用程序中TCP的连接数量的不同也会竞争流量，从而导致应用程序得到节点吞吐量不一样。 当然UDP 可能就不会出现这种情况，因为不存在拥塞控制这一机制，收到就接收，收不到就收不到。 网络协助方式此种方式时应用网络数据包丢失之类从而造成的拥塞控制对发送者进行一种反馈情况。 简单来说，TCP end-to-end 拥塞控制的形式，是根据ACK的情况进行判断网络状态，没有任何网络层参与，但是现在网络协助这种方式，是网络层根据网络状态直接将状态信息发送给接收端或者发送端的一种行为。 网络层反馈给发送者：将网络状态直接发送给发送端 网络层发聩给接收者，由接收者发送给发送者： 接收端收到网络状态信息后，将此信息与ACK一起发送给发送端 总结总的来说，TCP一直在处于发展中，目前而言也有类似其他的协议如DCCP(datagram congestion control Protocol)、DCTCP(data center TCP)、QUIC(quick udp internet connection,google 使用)、TFRC(TCP-friendly rate control,传输速率更平稳)、STTP….无论哪一种使用，哪一种更好，不仅仅取决其技术性，也取决社会行，商业性。","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://yoursite.com/categories/计算机网络/"}],"tags":[]},{"title":"复路分解与多复路","slug":"TCP-IP-demultipexing-multiplexing","date":"2018-11-13T12:37:21.000Z","updated":"2019-03-18T14:53:02.220Z","comments":true,"path":"2018/11/13/TCP-IP-demultipexing-multiplexing/","link":"","permalink":"http://yoursite.com/2018/11/13/TCP-IP-demultipexing-multiplexing/","excerpt":"","text":"复路分离与多复路发生在传输层的一种行为。 demultiplexing: At the receiving end, the transport layer examines these fields to identify the receiving socket and then directs the segment to that socket. This job of delivering the data in a transport-layer segment to the correct socket is called demultiplexing multiplexing: The job of gathering data chunks at the source host from different sockets, encapsulating each data chunk with header information (that will later be used in demultiplexing) to create segments, and passing the segments to the network layer is called multiplexing 中文含义 复路分离 在接收端，传输层根据数据段中的头字段特定字段[UDP：源port/目的port、TCP：源IP/port,目的IP/port]对数据帧进行分类，派送到不同的socket通道中，这个过程就是复路分离 多复路 传输层从上层应用层中不同的应用（socket）接收数据，然后封装成一个数据帧，派送到网络层，这个过程是多复路 那么具体流程是什么样的，请见下图 怎么看待socket socket 是接口 开发人员如果进行网络编程，使用socket 是不少的，现在比较常见的传输层协议常见TCP,UDP,SCTP,DCCP。socket是传输层与应用层的抽象网络接口，因此网络数据不可能直接通过应用层直接送到网络层，反之亦然，开发人员在应用层对socket拥有一切控制权，但是在传输层只有少量的控制权。 用socket干什么 上述所讲，socket 是接口，是建立在应用层和传输层之间的抽象层，因此对于低层的协议/数据，我们丝毫不用关心。举个例子，我们现在使用ftp 协议，我们只需要关系ftp中的对话规则，我怎么知道对话规则，直接找到RFC 文档，找到协议规则。不需要关心这个数据怎么传输到对方的。我们只需要做到知道两件事：我发送了什么 我接收到了什么。这样看来，使用socket 就像是一个黑匣子，放进去什么东西，出来了什么东西。就是这么简单？ 对，就是这样 TCP 和 UDP 建立通信的区别 UDP if two UDP segments have different source IP addresses and/or source port numbers, but have the same destination IP address and destination port number, then the two segments will be directed to the same destination process via the same destination socket. TCP In particular, and in contrast with UDP, two arriving TCP segments with different source IP addresses or source port numbers will (with the exception of a TCP segment carrying the original connectionestablishment request) be directed to two different sockets socket 是跨进程的，是一个系统资源，通过上述两段文字，从字面上看，TCP 是每来一个客户端，便建立一个socket 资源，UDP 则始终是一条socket 接收使用。但是善于利用的人，可针对这些特点，进行恶意的消耗资源 结束语本文只是针对了TCP/UDP 在网络框架（TCP/IP 5层结构）中一个大概的位置和作用，需要更加进行了解的请移步computer_network_top_to_down","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://yoursite.com/categories/计算机网络/"}],"tags":[]}]}